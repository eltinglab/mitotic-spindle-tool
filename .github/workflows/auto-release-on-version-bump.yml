name: Auto Release on Version Bump

on:
  pull_request:
    types: [closed]
    branches:
      - main
  push:
    branches:
      - main

jobs:
  check-version-and-create-tag:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.version_changed }}
      new_version: ${{ steps.version_check.outputs.new_version }}
      tag_created: ${{ steps.create_tag.outputs.tag_created }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get current version
      id: current_version
      run: |
        # Extract version from src/version.py
        CURRENT_VERSION=$(python3 -c "import sys; sys.path.insert(0, 'src'); from version import __version__; print(__version__)")
        echo "current_version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: v$CURRENT_VERSION"
    
    - name: Get previous version from latest tag
      id: previous_version
      run: |
        # Get the latest tag, default to v1.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
        echo "previous_version=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Previous version (latest tag): $LATEST_TAG"
    
    - name: Check if version changed
      id: version_check
      run: |
        CURRENT="${{ steps.current_version.outputs.current_version }}"
        PREVIOUS="${{ steps.previous_version.outputs.previous_version }}"
        
        echo "Comparing versions:"
        echo "  Current:  $CURRENT"
        echo "  Previous: $PREVIOUS"
        
        if [ "$CURRENT" != "$PREVIOUS" ]; then
          echo "Version has changed from $PREVIOUS to $CURRENT"
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "new_version=$CURRENT" >> $GITHUB_OUTPUT
        else
          echo "Version has not changed, skipping release"
          echo "version_changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Check if tag already exists
      id: tag_check
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        NEW_VERSION="${{ steps.version_check.outputs.new_version }}"
        
        # Check if tag already exists locally or remotely
        if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
          echo "❌ Tag $NEW_VERSION already exists locally"
          echo "tag_exists=true" >> $GITHUB_OUTPUT
        elif git ls-remote --tags origin | grep -q "refs/tags/$NEW_VERSION$"; then
          echo "❌ Tag $NEW_VERSION already exists on remote"
          echo "tag_exists=true" >> $GITHUB_OUTPUT
        else
          echo "✅ Tag $NEW_VERSION does not exist, proceeding with release"
          echo "tag_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create release tag (but not release yet)
      id: create_tag
      if: steps.version_check.outputs.version_changed == 'true' && steps.tag_check.outputs.tag_exists == 'false'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        NEW_VERSION="${{ steps.version_check.outputs.new_version }}"
        COMMIT_SHA="${{ github.sha }}"
        
        # Create and push tag ONLY (release will be created by release.yml)
        git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
        git push origin "$NEW_VERSION"
        
        echo "✅ Created tag: $NEW_VERSION"
        echo "tag_created=true" >> $GITHUB_OUTPUT
        echo "The release.yml workflow will now create the release and build artifacts"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
