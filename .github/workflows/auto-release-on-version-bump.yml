name: Auto Release on Version Bump

on:
  pull_request:
    types: [closed]
    branches:
      - main
  push:
    branches:
      - main

jobs:
  check-version-and-release:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.version_changed }}
      new_version: ${{ steps.version_check.outputs.new_version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get current version
      id: current_version
      run: |
        # Extract version from setup.py
        CURRENT_VERSION=$(grep -E "version\s*=\s*['\"]" setup.py | sed -E "s/.*version\s*=\s*['\"]([^'\"]+)['\"].*/\1/")
        echo "current_version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: v$CURRENT_VERSION"
    
    - name: Get previous version from latest tag
      id: previous_version
      run: |
        # Get the latest tag, default to v1.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")
        echo "previous_version=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Previous version (latest tag): $LATEST_TAG"
    
    - name: Check if version changed
      id: version_check
      run: |
        CURRENT="${{ steps.current_version.outputs.current_version }}"
        PREVIOUS="${{ steps.previous_version.outputs.previous_version }}"
        
        echo "Comparing versions:"
        echo "  Current:  $CURRENT"
        echo "  Previous: $PREVIOUS"
        
        if [ "$CURRENT" != "$PREVIOUS" ]; then
          echo "Version has changed from $PREVIOUS to $CURRENT"
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "new_version=$CURRENT" >> $GITHUB_OUTPUT
        else
          echo "Version has not changed, skipping release"
          echo "version_changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Check if tag already exists
      id: tag_check
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        NEW_VERSION="${{ steps.version_check.outputs.new_version }}"
        
        # Check if tag already exists locally or remotely
        if git rev-parse "$NEW_VERSION" >/dev/null 2>&1; then
          echo "❌ Tag $NEW_VERSION already exists locally"
          echo "tag_exists=true" >> $GITHUB_OUTPUT
        elif git ls-remote --tags origin | grep -q "refs/tags/$NEW_VERSION$"; then
          echo "❌ Tag $NEW_VERSION already exists on remote"
          echo "tag_exists=true" >> $GITHUB_OUTPUT
        else
          echo "✅ Tag $NEW_VERSION does not exist, proceeding with release"
          echo "tag_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create release tag and GitHub release
      if: steps.version_check.outputs.version_changed == 'true' && steps.tag_check.outputs.tag_exists == 'false'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        NEW_VERSION="${{ steps.version_check.outputs.new_version }}"
        COMMIT_SHA="${{ github.sha }}"
        
        # Create comprehensive release message
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          RELEASE_TITLE="$NEW_VERSION - $PR_TITLE"
          RELEASE_BODY="## Mitotic Spindle Tool $NEW_VERSION

        ### Changes
        - $PR_TITLE (PR #$PR_NUMBER by @$PR_AUTHOR)

        ### Commit
        $COMMIT_SHA

        ### Downloads
        Executables for all platforms will be available once the release build completes.

        This release was automatically created when PR #$PR_NUMBER was merged with a version bump."
        else
          # Direct push to main
          COMMIT_MESSAGE=$(git log -1 --pretty=%B | head -1)
          RELEASE_TITLE="$NEW_VERSION"
          RELEASE_BODY="## Mitotic Spindle Tool $NEW_VERSION

        ### Changes
        $COMMIT_MESSAGE

        ### Commit
        $COMMIT_SHA

        ### Downloads
        Executables for all platforms will be available once the release build completes.

        This release was automatically created when the version was bumped in commit $COMMIT_SHA."
        fi
        
        # Create and push tag
        git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
        git push origin "$NEW_VERSION"
        
        # Create GitHub Release
        gh release create "$NEW_VERSION" \
          --title "$RELEASE_TITLE" \
          --notes "$RELEASE_BODY" \
          --latest
        
        echo "✅ Created release: $NEW_VERSION"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
