name: Auto Tag and Release on Manual Version Change

# This workflow detects when a maintainer manually changes the version in src/version.py
# and automatically creates a tag and triggers the release build workflow
on:
  push:
    branches:
      - main
    paths:
      - 'src/version.py'

jobs:
  create-tag-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get current version from version.py
      id: current_version
      run: |
        # Extract version from src/version.py
        CURRENT_VERSION=$(python3 -c "import sys; sys.path.insert(0, 'src'); from version import __version__; print(__version__)")
        echo "current_version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version in version.py: v$CURRENT_VERSION"
    
    - name: Get latest tag
      id: latest_tag
      run: |
        # Get the latest tag, default to v0.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest git tag: $LATEST_TAG"
    
    - name: Check if version changed
      id: version_check
      run: |
        CURRENT="${{ steps.current_version.outputs.current_version }}"
        LATEST="${{ steps.latest_tag.outputs.latest_tag }}"
        
        echo "Comparing versions:"
        echo "  Current version.py: $CURRENT"
        echo "  Latest git tag:     $LATEST"
        
        if [ "$CURRENT" != "$LATEST" ]; then
          echo "✅ Version has been manually updated: $LATEST → $CURRENT"
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "new_version=$CURRENT" >> $GITHUB_OUTPUT
        else
          echo "ℹ️  Version unchanged, no action needed"
          echo "version_changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Verify tag doesn't exist
      id: tag_check
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        NEW_VERSION="${{ steps.version_check.outputs.new_version }}"
        
        # Check if tag already exists
        if git tag -l | grep -q "^$NEW_VERSION$"; then
          echo "❌ Tag $NEW_VERSION already exists locally"
          echo "tag_exists=true" >> $GITHUB_OUTPUT
        elif git ls-remote --tags origin | grep -q "refs/tags/$NEW_VERSION$"; then
          echo "❌ Tag $NEW_VERSION already exists on remote"
          echo "tag_exists=true" >> $GITHUB_OUTPUT
        else
          echo "✅ Tag $NEW_VERSION does not exist, safe to create"
          echo "tag_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create and push tag
      id: create_tag
      if: steps.version_check.outputs.version_changed == 'true' && steps.tag_check.outputs.tag_exists == 'false'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        NEW_VERSION="${{ steps.version_check.outputs.new_version }}"
        
        # Create annotated tag
        git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION

        Manual version bump detected in src/version.py
        Commit: ${{ github.sha }}
        Author: ${{ github.actor }}"
        
        # Push tag to trigger release workflow
        git push origin "$NEW_VERSION"
        
        echo "✅ Created and pushed tag: $NEW_VERSION"
        echo "tag_created=true" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Summary
      run: |
        if [[ "${{ steps.version_check.outputs.version_changed }}" == "true" ]]; then
          if [[ "${{ steps.tag_check.outputs.tag_exists }}" == "true" ]]; then
            echo "⚠️  Tag ${{ steps.version_check.outputs.new_version }} already exists - no action taken"
          elif [[ "${{ steps.create_tag.outputs.tag_created }}" == "true" ]]; then
            echo "✅ Successfully created tag ${{ steps.version_check.outputs.new_version }}"
            echo "🚀 Release build will start automatically"
          else
            echo "❌ Failed to create tag"
          fi
        else
          echo "ℹ️  No manual version change detected"
        fi
    outputs:
      version_changed: ${{ steps.version_check.outputs.version_changed }}
      new_version: ${{ steps.version_check.outputs.new_version }}
      tag_created: ${{ steps.create_tag.outputs.tag_created }}
