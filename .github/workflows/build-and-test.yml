name: Build and Test

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

jobs:
  build-matrix:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller pytest flake8
        
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test imports
      run: |
        cd src
        python -c "import spindleGUI; print('spindleGUI imports successfully')"
        python -c "import curveFitData; print('curveFitData imports successfully')"
        python -c "import plotSpindle; print('plotSpindle imports successfully')"
        
    - name: Build executable
      run: |
        python build.py
        
    - name: Test executable exists
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          if [[ -f "dist/mitotic-spindle-tool.exe" ]]; then
            echo "✓ Windows executable built successfully"
            ls -la dist/
          else
            echo "✗ Windows executable not found"
            exit 1
          fi
        else
          if [[ -f "dist/mitotic-spindle-tool" ]]; then
            echo "✓ Unix executable built successfully"
            ls -la dist/
          else
            echo "✗ Unix executable not found"
            exit 1
          fi
        fi
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mitotic-spindle-tool-${{ runner.os }}-py${{ matrix.python-version }}
        path: |
          dist/mitotic-spindle-tool*
          dist/run-*
        retention-days: 7
