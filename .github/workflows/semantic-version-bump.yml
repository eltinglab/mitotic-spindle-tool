name: Semantic Version Bump

on:
  push:
    branches: [main]

jobs:
  semantic-bump:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Configure git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Analyze commit messages for version bump
      id: analyze
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          COMMITS=$(git log $LAST_TAG..HEAD --oneline)
        else
          COMMITS=$(git log --oneline -10)  # Last 10 commits if no tags
        fi
        
        echo "Analyzing commits:"
        echo "$COMMITS"
        
        # Determine version bump based on conventional commits
        BUMP_TYPE="none"
        
        if echo "$COMMITS" | grep -qE "^[a-f0-9]+ (BREAKING CHANGE|feat!|fix!|chore!)"; then
          BUMP_TYPE="major"
        elif echo "$COMMITS" | grep -qE "^[a-f0-9]+ feat(\(.+\))?:"; then
          BUMP_TYPE="minor"
        elif echo "$COMMITS" | grep -qE "^[a-f0-9]+ (fix|docs|style|refactor|perf|test|chore)(\(.+\))?:"; then
          BUMP_TYPE="patch"
        fi
        
        echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
        echo "Detected bump type: $BUMP_TYPE"
    
    - name: Bump version if needed
      if: steps.analyze.outputs.bump_type != 'none'
      run: |
        BUMP_TYPE="${{ steps.analyze.outputs.bump_type }}"
        
        CURRENT_VERSION=$(python3 -c "import sys; sys.path.insert(0, 'src'); from version import __version__; print(__version__)")
        
        python3 update_version.py --bump $BUMP_TYPE
        
        NEW_VERSION=$(python3 -c "import sys; sys.path.insert(0, 'src'); from version import __version__; print(__version__)")
        
        git add src/version.py pyproject.toml
        git commit -m "ðŸš€ Auto-bump version to v$NEW_VERSION ($BUMP_TYPE)

        Based on conventional commit analysis"
        
        git push origin main
        
        echo "âœ… Version bumped: $CURRENT_VERSION â†’ $NEW_VERSION"
