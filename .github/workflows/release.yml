name: Release Build

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
    paths:
      - 'src/version.py'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build release for (e.g., v1.1.3 or "latest" for most recent tag)'
        required: true
        default: 'latest'

jobs:
  check-version-and-create-tag:
    # Only run this job for pushes to main with version.py changes
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.version_changed }}
      new_version: ${{ steps.version_check.outputs.new_version }}
      tag_created: ${{ steps.create_tag.outputs.tag_created }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get current version from version.py
      id: current_version
      run: |
        # Extract version from src/version.py
        CURRENT_VERSION=$(python3 -c "import sys; sys.path.insert(0, 'src'); from version import __version__; print(__version__)")
        echo "current_version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version in version.py: v$CURRENT_VERSION"
    
    - name: Get latest tag
      id: latest_tag
      run: |
        # Get the latest tag, default to v0.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest git tag: $LATEST_TAG"
    
    - name: Check if version changed
      id: version_check
      run: |
        CURRENT="${{ steps.current_version.outputs.current_version }}"
        LATEST="${{ steps.latest_tag.outputs.latest_tag }}"
        
        echo "Comparing versions:"
        echo "  Current version.py: $CURRENT"
        echo "  Latest git tag:     $LATEST"
        
        if [ "$CURRENT" != "$LATEST" ]; then
          echo "✅ Version has been manually updated: $LATEST → $CURRENT"
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "new_version=$CURRENT" >> $GITHUB_OUTPUT
        else
          echo "ℹ️  Version unchanged, no action needed"
          echo "version_changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Verify tag doesn't exist
      id: tag_check
      if: steps.version_check.outputs.version_changed == 'true'
      run: |
        NEW_VERSION="${{ steps.version_check.outputs.new_version }}"
        
        # Check if tag already exists
        if git tag -l | grep -q "^$NEW_VERSION$"; then
          echo "❌ Tag $NEW_VERSION already exists locally"
          echo "tag_exists=true" >> $GITHUB_OUTPUT
        elif git ls-remote --tags origin | grep -q "refs/tags/$NEW_VERSION$"; then
          echo "❌ Tag $NEW_VERSION already exists on remote"
          echo "tag_exists=true" >> $GITHUB_OUTPUT
        else
          echo "✅ Tag $NEW_VERSION does not exist, safe to create"
          echo "tag_exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create and push tag
      id: create_tag
      if: steps.version_check.outputs.version_changed == 'true' && steps.tag_check.outputs.tag_exists == 'false'
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        NEW_VERSION="${{ steps.version_check.outputs.new_version }}"
        
        # Create annotated tag
        git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION

        Manual version bump detected in src/version.py
        Commit: ${{ github.sha }}
        Author: ${{ github.actor }}"
        
        # Push tag to trigger release workflow
        git push origin "$NEW_VERSION"
        
        echo "✅ Created and pushed tag: $NEW_VERSION"
        echo "tag_created=true" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Summary
      run: |
        if [[ "${{ steps.version_check.outputs.version_changed }}" == "true" ]]; then
          if [[ "${{ steps.tag_check.outputs.tag_exists }}" == "true" ]]; then
            echo "⚠️  Tag ${{ steps.version_check.outputs.new_version }} already exists - no action taken"
          elif [[ "${{ steps.create_tag.outputs.tag_created }}" == "true" ]]; then
            echo "✅ Successfully created tag ${{ steps.version_check.outputs.new_version }}"
            echo "🚀 Release build will start automatically"
          else
            echo "❌ Failed to create tag"
          fi
        else
          echo "ℹ️  No manual version change detected"
        fi

  create-release:
    # Run if it's a tag push, manual dispatch, release event, or if a new tag was created by version check
    if: |
      always() && (
        (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
        github.event_name == 'workflow_dispatch' ||
        github.event_name == 'release' ||
        (needs.check-version-and-create-tag.result == 'success' && needs.check-version-and-create-tag.outputs.tag_created == 'true')
      )
    needs: [check-version-and-create-tag]
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      tag_name: ${{ steps.get_tag.outputs.tag_name }}
      release_created: ${{ steps.create_release.outputs.release_created }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get tag name
      id: get_tag
      run: |
        if [[ "${{ needs.check-version-and-create-tag.result }}" == "success" && "${{ needs.check-version-and-create-tag.outputs.tag_created }}" == "true" ]]; then
          # Use the newly created tag from the version check job
          TAG_NAME="${{ needs.check-version-and-create-tag.outputs.new_version }}"
          echo "Using newly created tag from version check: $TAG_NAME"
        elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          if [[ "${{ github.event.inputs.tag }}" == "latest" ]]; then
            TAG_NAME=$(git describe --tags --abbrev=0)
          else
            TAG_NAME="${{ github.event.inputs.tag }}"
          fi
          echo "Using manual dispatch tag: $TAG_NAME"
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Using tag from push event: $TAG_NAME"
        else
          TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "latest")
          echo "Using latest tag: $TAG_NAME"
        fi
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "Final tag name: $TAG_NAME"
        
    - name: Create Release
      id: create_release
      run: |
        TAG_NAME="${{ steps.get_tag.outputs.tag_name }}"
        
        # Check if release already exists
        if gh release view "$TAG_NAME" >/dev/null 2>&1; then
          echo "Release $TAG_NAME already exists, will update it"
          RELEASE_EXISTS=true
        else
          echo "Creating new release $TAG_NAME"
          RELEASE_EXISTS=false
        fi
        
        # Create release body
        RELEASE_BODY="## Mitotic Spindle Tool $TAG_NAME
        
        ### Downloads
        - **Windows**: \`mitotic-spindle-tool.exe\` (standalone executable)
        - **Linux (Traditional)**: \`mitotic-spindle-tool-linux.tar.gz\` (includes launcher script)
        - **Linux (AppImage)**: \`mitotic-spindle-tool.AppImage\` (portable, recommended for Linux)
        - **macOS**: \`mitotic-spindle-tool-macos.dmg\` (disk image)
        
        ### Installation
        - **Windows**: Download and run \`mitotic-spindle-tool.exe\` directly
        - **Linux (Traditional)**: Extract \`mitotic-spindle-tool-linux.tar.gz\` and run \`./run-mitotic-spindle-tool.sh\`
        - **Linux (AppImage)**: Download \`mitotic-spindle-tool.AppImage\`, make executable (\`chmod +x mitotic-spindle-tool.AppImage\`) and run directly
        - **macOS**: Open \`mitotic-spindle-tool-macos.dmg\` and run the application
        
        ### About AppImage (Linux Users)
        The AppImage format provides a portable application that runs on most Linux distributions without installation. Just download, make executable, and run! The AppImage includes all dependencies and proper desktop integration with icons.
        
        ### Changes
        See the commit history for detailed changes in this release.
        
        ### Requirements
        No additional software installation required - all dependencies are bundled."
        
        if [[ "$RELEASE_EXISTS" == "false" ]]; then
          # Create the release
          gh release create "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --notes "$RELEASE_BODY" \
            --draft=false \
            --prerelease=false
        else
          # Update existing release
          gh release edit "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --notes "$RELEASE_BODY" \
            --draft=false \
            --prerelease=false
        fi
        
        # Get upload URL for matrix jobs
        UPLOAD_URL=$(gh api repos/${{ github.repository }}/releases/tags/$TAG_NAME --jq .upload_url)
        echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    needs: [check-version-and-create-tag, create-release]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            executable: mitotic-spindle-tool
            package: mitotic-spindle-tool-linux.tar.gz
          - os: windows-latest
            platform: windows
            executable: mitotic-spindle-tool.exe
            package: mitotic-spindle-tool.exe
          - os: macos-latest
            platform: macos
            executable: mitotic-spindle-tool
            package: mitotic-spindle-tool-macos.dmg
            
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Linux dependencies (Ubuntu only)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y wget fuse libfuse2
        # Install appimagetool for AppImage creation
        echo "📥 Downloading appimagetool..."
        wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool
        sudo mv appimagetool /usr/local/bin/
        echo "✅ appimagetool installed"
        echo "🔍 Verifying appimagetool installation:"
        which appimagetool
        appimagetool --version || echo "Note: appimagetool --version may not work but tool should be functional"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable
      env:
        CI: true
      run: |
        python build.py
        
    - name: Verify build
      shell: bash
      run: |
        if [[ -f "dist/${{ matrix.executable }}" ]]; then
          echo "[SUCCESS] Executable built successfully"
          ls -la dist/
          
          # Check for AppImage on Linux
          if [[ "${{ matrix.platform }}" == "linux" ]]; then
            if [[ -f "dist/mitotic-spindle-tool.AppImage" ]]; then
              echo "✅ AppImage created successfully"
              echo "📏 AppImage size: $(du -h dist/mitotic-spindle-tool.AppImage | cut -f1)"
            else
              echo "⚠️  AppImage not found - this may indicate appimagetool issues"
            fi
          fi
        else
          echo "[ERROR] Executable not found"
          exit 1
        fi
        
    - name: Generate build metadata and checksums
      run: |
        python generate_build_metadata.py
        echo "Generated metadata files:"
        ls -la dist/*.json dist/*.txt 2>/dev/null || echo "No metadata files generated"
        
    - name: Create release package
      shell: bash
      run: |
        cd dist
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          # Windows - no packaging needed, just use the .exe directly
          echo "Windows executable ready: ${{ matrix.executable }}"
        elif [[ "${{ matrix.platform }}" == "macos" ]]; then
          # macOS - create DMG if possible, otherwise tar.gz
          if command -v hdiutil >/dev/null 2>&1; then
            mkdir -p dmg_temp
            cp ${{ matrix.executable }} dmg_temp/
            cp run-mitotic-spindle-tool.sh dmg_temp/
            hdiutil create -volname "Mitotic Spindle Tool" \
              -srcfolder dmg_temp -ov -format UDZO \
              ${{ matrix.package }} || \
            tar -czf mitotic-spindle-tool-macos.tar.gz ${{ matrix.executable }} run-mitotic-spindle-tool.sh
            rm -rf dmg_temp
          else
            # Fallback to tar.gz
            tar -czf mitotic-spindle-tool-macos.tar.gz ${{ matrix.executable }} run-mitotic-spindle-tool.sh
          fi
        else
          # Linux - create tar.gz with executable and launcher
          tar -czf ${{ matrix.package }} ${{ matrix.executable }} run-mitotic-spindle-tool.sh
        fi
        cd ..
        
    - name: Upload release asset
      shell: bash
      run: |
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          # Windows - upload the .exe directly
          gh release upload ${{ needs.create-release.outputs.tag_name }} \
            ./dist/${{ matrix.executable }} \
            --clobber
        elif [[ "${{ matrix.platform }}" == "macos" ]]; then
          # macOS - upload DMG if it exists, otherwise tar.gz
          if [[ -f "./dist/${{ matrix.package }}" ]]; then
            gh release upload ${{ needs.create-release.outputs.tag_name }} \
              ./dist/${{ matrix.package }} \
              --clobber
          elif [[ -f "./dist/mitotic-spindle-tool-macos.tar.gz" ]]; then
            gh release upload ${{ needs.create-release.outputs.tag_name }} \
              ./dist/mitotic-spindle-tool-macos.tar.gz \
              --clobber
          fi
        else
          # Linux - upload tar.gz
          gh release upload ${{ needs.create-release.outputs.tag_name }} \
            ./dist/${{ matrix.package }} \
            --clobber
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload AppImage (Linux only)
      if: matrix.platform == 'linux'
      run: |
        if [ -f "./dist/mitotic-spindle-tool.AppImage" ]; then
          echo "✅ AppImage found, uploading to release..."
          gh release upload ${{ needs.create-release.outputs.tag_name }} \
            ./dist/mitotic-spindle-tool.AppImage \
            --clobber
          echo "✅ AppImage uploaded successfully"
        else
          echo "❌ AppImage not found at ./dist/mitotic-spindle-tool.AppImage"
          echo "📁 Contents of dist directory:"
          ls -la ./dist/
          echo "⚠️  AppImage creation may have failed - check build logs"
          # Don't fail the build, but make the issue visible
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true  # Don't fail the entire build if AppImage upload fails
      
    - name: Upload build metadata (Linux only)
      if: matrix.platform == 'linux'
      run: |
        # Upload metadata files if they exist
        if [ -f "./dist/build_metadata.json" ]; then
          gh release upload ${{ needs.create-release.outputs.tag_name }} \
            ./dist/build_metadata.json \
            --clobber
        fi
        if [ -f "./dist/CHECKSUMS.txt" ]; then
          gh release upload ${{ needs.create-release.outputs.tag_name }} \
            ./dist/CHECKSUMS.txt \
            --clobber
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-${{ matrix.platform }}-${{ needs.create-release.outputs.tag_name }}
        path: |
          dist/${{ matrix.package }}
          dist/mitotic-spindle-tool.AppImage
          dist/build_metadata.json
          dist/CHECKSUMS.txt
        retention-days: 90
