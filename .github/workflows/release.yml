name: Auto Release on Version Bump

on:
  push:
    branches:
      - main
    paths:
      - 'src/version.py'

jobs:
  auto-release:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag_name }}
      release_created: ${{ steps.create_tag.outputs.release_created }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get current version from version.py
      id: current_version
      shell: bash
      run: |
        CURRENT_VERSION=$(python3 -c "import sys; sys.path.insert(0, 'src'); from version import __version__; print(__version__)")
        echo "current_version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version in version.py: v$CURRENT_VERSION"
    
    - name: Get latest tag
      id: latest_tag
      shell: bash
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest git tag: $LATEST_TAG"
    
    - name: Check if version changed and create tag/release
      id: create_tag
      shell: bash
      run: |
        CURRENT="${{ steps.current_version.outputs.current_version }}"
        LATEST="${{ steps.latest_tag.outputs.latest_tag }}"
        
        echo "Comparing versions:"
        echo "  Current version.py: $CURRENT"
        echo "  Latest git tag:     $LATEST"
        
        if [ "$CURRENT" != "$LATEST" ]; then
          echo "✅ Version has been manually updated: $LATEST → $CURRENT"
          
          # Check if tag already exists
          if git tag -l | grep -q "^$CURRENT$" || git ls-remote --tags origin | grep -q "refs/tags/$CURRENT$"; then
            echo "❌ Tag $CURRENT already exists - skipping"
            exit 1
          fi
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create and push tag
          git tag -a "$CURRENT" -m "Release $CURRENT

          Automatic release created from version bump in src/version.py
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}"
          
          git push origin "$CURRENT"
          echo "✅ Created and pushed tag: $CURRENT"
          
          # Get commit history for release notes
          COMMIT_HISTORY=$(git log --oneline --pretty=format:"- %s (%an)" "$LATEST..${{ github.sha }}" | head -20)
          if [ -z "$COMMIT_HISTORY" ]; then
            COMMIT_HISTORY="- Initial release"
          fi
          
          # Create GitHub release
          RELEASE_BODY="## Mitotic Spindle Tool $CURRENT
          
          ### Installation Instructions
          
          #### 🪟 Windows
          1. Download \`mitotic-spindle-tool-win.exe\`
          2. **Security Warning**: Windows may show a security warning because the executable is not digitally signed
          3. Click \"More info\" then \"Run anyway\"
          4. Run the executable directly - no installation required
          
          #### 🐧 Linux (AppImage - Recommended)
          1. Download \`mitotic-spindle-tool-linux.AppImage\`
          2. **Set executable permissions**: \`chmod +x mitotic-spindle-tool-linux.AppImage\`
          3. Run directly: \`./mitotic-spindle-tool-linux.AppImage\`
          4. Optional: Right-click → Properties → Permissions → Allow executing as program (GUI method)
          
          #### 🐧 Linux (Traditional)
          1. Download and extract \`mitotic-spindle-tool-linux.tar.gz\`
          2. **Set executable permissions**: \`chmod +x run-mitotic-spindle-tool.sh\`
          3. Run: \`./run-mitotic-spindle-tool.sh\`
          
          #### 🍎 macOS
          1. Download and open \`mitotic-spindle-tool-macos.dmg\`
          2. Drag the app to your Applications folder
          3. **Security Note**: You may need to right-click the app and select \"Open\" the first time due to Gatekeeper (unsigned app)
          4. Alternatively, go to System Preferences → Security & Privacy → General and click \"Open Anyway\"
          
          ### Changes in this Release
          $COMMIT_HISTORY
          
          ### Permissions and Security
          Note that this release is not signed, so you may need to allow the app to run on your system despite warnings. You should only run this app from trusted sources like the eltinglab github repository.
          
          ### Issues and Feedback
          If you encounter any issues, please open a new issue on the gitHub repository"
          
          gh release create "$CURRENT" \
            --title "Release $CURRENT" \
            --notes "$RELEASE_BODY" \
            --draft=false \
            --prerelease=false
          
          echo "tag_name=$CURRENT" >> $GITHUB_OUTPUT
          echo "release_created=true" >> $GITHUB_OUTPUT
        else
          echo "ℹ️  Version unchanged, no action needed"
          echo "release_created=false" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-release:
    needs: [auto-release]
    if: needs.auto-release.outputs.release_created == 'true'
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            executable: mitotic-spindle-tool
            package: mitotic-spindle-tool-linux.tar.gz
            appimage: mitotic-spindle-tool-linux.AppImage
          - os: windows-latest
            platform: windows
            executable: mitotic-spindle-tool.exe
            package: mitotic-spindle-tool-win.exe
          - os: macos-latest
            platform: macos
            executable: mitotic-spindle-tool
            package: mitotic-spindle-tool-macos.dmg
            
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Linux dependencies (Ubuntu only)
      if: matrix.platform == 'linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y wget fuse libfuse2
        echo "📥 Downloading appimagetool..."
        wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
        chmod +x appimagetool
        sudo mv appimagetool /usr/local/bin/
        echo "✅ appimagetool installed"
        
    - name: Install dependencies
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Build executable
      shell: bash
      env:
        CI: true
      run: |
        echo "🏗️ Starting build process..."
        echo "Platform: ${{ matrix.platform }}"
        echo "Expected executable: ${{ matrix.executable }}"
        python .github/workflows/build-scripts/build.py
        echo "🔍 Build completed, checking dist/ contents:"
        ls -la dist/ || echo "dist/ directory not found"
        
    - name: Verify build
      shell: bash
      run: |
        echo "🔍 Checking for built executables..."
        echo "Expected executable: ${{ matrix.executable }}"
        ls -la dist/
        
        if [[ -f "dist/${{ matrix.executable }}" ]]; then
          echo "✅ Executable built successfully: ${{ matrix.executable }}"
          
          if [[ "${{ matrix.platform }}" == "linux" ]]; then
            if [[ -f "dist/${{ matrix.appimage }}" ]]; then
              echo "✅ AppImage created successfully"
            else
              echo "ℹ️ AppImage not found (may be expected)"
            fi
          fi
        else
          echo "❌ Executable not found: dist/${{ matrix.executable }}"
          echo "Contents of dist/:"
          ls -la dist/
          exit 1
        fi
        
    - name: Create release package
      shell: bash
      run: |
        cd dist
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          echo "Windows executable ready: ${{ matrix.executable }}"
        elif [[ "${{ matrix.platform }}" == "macos" ]]; then
          if command -v hdiutil >/dev/null 2>&1; then
            # DMG should already be created by build.py
            if [[ ! -f "${{ matrix.package }}" ]]; then
              echo "DMG not found, creating fallback package..."
              mkdir -p dmg_temp
              cp ${{ matrix.executable }} dmg_temp/ 2>/dev/null || echo "Executable not found for fallback"
              cp run-mitotic-spindle-tool.sh dmg_temp/ 2>/dev/null || echo "No launcher script found"
              hdiutil create -volname "Mitotic Spindle Tool" \
                -srcfolder dmg_temp -ov -format UDZO \
                ${{ matrix.package }} || \
              tar -czf mitotic-spindle-tool-macos.tar.gz ${{ matrix.executable }}
              rm -rf dmg_temp
            fi
          else
            tar -czf mitotic-spindle-tool-macos.tar.gz ${{ matrix.executable }}
          fi
        else
          # Linux packages should already be created by build.py
          if [[ ! -f "${{ matrix.package }}" ]]; then
            echo "Package not found, creating fallback..."
            tar -czf ${{ matrix.package }} ${{ matrix.executable }} run-mitotic-spindle-tool.sh 2>/dev/null || \
            tar -czf ${{ matrix.package }} ${{ matrix.executable }}
          fi
        fi
        cd ..
        
    - name: Upload release assets
      shell: bash
      run: |
        TAG_NAME="${{ needs.auto-release.outputs.tag_name }}"
        
        echo "📤 Uploading release assets for ${{ matrix.platform }}"
        echo "Available files in dist/:"
        ls -la dist/
        
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          # Upload the Windows executable with the final name
          if [[ -f "dist/mitotic-spindle-tool-win.exe" ]]; then
            gh release upload "$TAG_NAME" ./dist/mitotic-spindle-tool-win.exe --clobber
          elif [[ -f "dist/${{ matrix.executable }}" ]]; then
            # Copy to expected release name and upload
            cp "dist/${{ matrix.executable }}" "dist/mitotic-spindle-tool-win.exe"
            gh release upload "$TAG_NAME" ./dist/mitotic-spindle-tool-win.exe --clobber
          fi
        elif [[ "${{ matrix.platform }}" == "macos" ]]; then
          # Upload the macOS DMG with the final name
          if [[ -f "dist/mitotic-spindle-tool-macos.dmg" ]]; then
            gh release upload "$TAG_NAME" ./dist/mitotic-spindle-tool-macos.dmg --clobber
          elif [[ -f "dist/${{ matrix.package }}" ]]; then
            gh release upload "$TAG_NAME" ./dist/${{ matrix.package }} --clobber
          elif [[ -f "./dist/mitotic-spindle-tool-macos.tar.gz" ]]; then
            gh release upload "$TAG_NAME" ./dist/mitotic-spindle-tool-macos.tar.gz --clobber
          fi
        else
          # Linux - upload both tar.gz and AppImage with final names
          if [[ -f "dist/mitotic-spindle-tool-linux.tar.gz" ]]; then
            gh release upload "$TAG_NAME" ./dist/mitotic-spindle-tool-linux.tar.gz --clobber
          elif [[ -f "dist/${{ matrix.package }}" ]]; then
            gh release upload "$TAG_NAME" ./dist/${{ matrix.package }} --clobber
          fi
          
          # Upload AppImage if it exists
          if [[ -f "dist/mitotic-spindle-tool-linux.AppImage" ]]; then
            gh release upload "$TAG_NAME" ./dist/mitotic-spindle-tool-linux.AppImage --clobber
          elif [[ -f "dist/${{ matrix.appimage }}" ]]; then
            gh release upload "$TAG_NAME" ./dist/${{ matrix.appimage }} --clobber
          fi
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
